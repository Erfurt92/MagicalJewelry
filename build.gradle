buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${version_mc}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                magicaljewelry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                magicaljewelry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'magicaljewelry', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                magicaljewelry {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

configurations {
    runtimeMod { transitive = false }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_forge}"

    runtimeMod fg.deobf("top.theillusivec4.curios:curios-forge:${version_curios}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${version_curios}:api")
}

project.afterEvaluate {
    task copyMods(type:Copy) {
        from configurations.runtimeMod.files
        into file("run/mods")
    }
    tasks.forEach {
        if (it.name.startsWith("prepareRun"))
            it.dependsOn copyMods
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "${mod_author}",
                "Specification-Version": "${mod_version}",
                "Implementation-Title": "${mod_name}",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"${mod_author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': project.version,
                'mod_id' : mod_id,
                'mod_name': mod_name,
                'mod_url': mod_url,
                'mod_author': mod_author,
                'mod_description': mod_description,
                'mod_icon': mod_icon,
                'mod_loader_version': mod_loader_version,
                'mod_loader_version_range': mod_loader_version_range,
                'mod_version_range': mod_version_range,
                'mod_issue_url': mod_issue_url,
                'version_range_curios': version_range_curios
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}